'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

exports.toBuffer = toBuffer;
exports.fromBuffer = fromBuffer;
exports.generateKey = generateKey;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _crypto = require('crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _zlib = require('zlib');

var _zlib2 = _interopRequireDefault(_zlib);

var _buffer = require('buffer');

var _util = require('./util');

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _xml2js = require('xml2js');

var _xml2js2 = _interopRequireDefault(_xml2js);

var _cryptoSalsa20 = require('../crypto/Salsa20');

var _cryptoSalsa202 = _interopRequireDefault(_cryptoSalsa20);

var _cryptoCipher = require('../crypto/Cipher');

var _utilityHashedBlockIO = require('../utility/HashedBlockIO');

var _utilityHashedBlockIO2 = _interopRequireDefault(_utilityHashedBlockIO);

var _keyComposite = require('../key/Composite');

var _keyComposite2 = _interopRequireDefault(_keyComposite);

var _utilityBufferReader = require('../utility/BufferReader');

var _utilityBufferReader2 = _interopRequireDefault(_utilityBufferReader);

var _Database = require('./Database');

var _Database2 = _interopRequireDefault(_Database);

var _KdbxFile = require('./KdbxFile');

var randomBytes = function randomBytes(length) {
  return new _bluebird2['default'](function (resolve, reject) {
    _crypto2['default'].randomBytes(length, function (err, res) {
      if (err) return reject(err);
      resolve(res);
    });
  });
};

var COMPRESSION = (0, _util.makeEnum)(['NO', 'GZIP']);

var SALSA_20 = new _buffer.Buffer([0x02, 0x00, 0x00, 0x00]);

var END = new _buffer.Buffer('\r\n\r\n');

var STREAM_START_BYTES_LENGTH = 32;

function defaultFileInfo() {
  return _bluebird2['default'].all([randomBytes(32), randomBytes(32), randomBytes(16), randomBytes(32), randomBytes(STREAM_START_BYTES_LENGTH)]).then(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 5);

    var masterSeed = _ref2[0];
    var transformSeed = _ref2[1];
    var encryptionIV = _ref2[2];
    var protectedStreamKey = _ref2[3];
    var streamStartBytes = _ref2[4];

    return new FileInfo({
      masterSeed: masterSeed,
      transformSeed: transformSeed,
      encryptionIV: encryptionIV,
      protectedStreamKey: protectedStreamKey,
      streamStartBytes: streamStartBytes
    });
  });
}

var FileInfo = (function () {
  function FileInfo(_ref3) {
    var _ref3$cipher = _ref3.cipher;
    var cipher = _ref3$cipher === undefined ? _cryptoCipher.Cipher.DEFAULT : _ref3$cipher;
    var _ref3$transformRounds = _ref3.transformRounds;
    var transformRounds = _ref3$transformRounds === undefined ? 6000 : _ref3$transformRounds;
    var _ref3$compression = _ref3.compression;
    var compression = _ref3$compression === undefined ? COMPRESSION.GZIP : _ref3$compression;
    var masterSeed = _ref3.masterSeed;
    var transformSeed = _ref3.transformSeed;
    var encryptionIV = _ref3.encryptionIV;
    var protectedStreamKey = _ref3.protectedStreamKey;
    var streamStartBytes = _ref3.streamStartBytes;

    _classCallCheck(this, FileInfo);

    this.cipher = cipher;
    this.transformRounds = transformRounds;
    this.compression = compression;
    this.masterSeed = masterSeed;
    this.transformSeed = transformSeed;
    this.encryptionIV = encryptionIV;
    this.protectedStreamKey = protectedStreamKey;
    this.streamStartBytes = streamStartBytes;

    this._salsa = new _cryptoSalsa202['default'](_crypto2['default'].createHash('sha256').update(protectedStreamKey).digest(), [0xE8, 0x30, 0x09, 0x4B, 0x97, 0x20, 0x5D, 0x2A]);
  }

  _createClass(FileInfo, [{
    key: 'pack',
    value: function pack(value) {
      return this._salsa.encrypt(new _buffer.Buffer(value, 'utf8')).toString('base64');
    }
  }, {
    key: 'unpack',
    value: function unpack(value) {
      return this._salsa.decrypt(new _buffer.Buffer(value, 'base64')).toString('utf8');
    }
  }]);

  return FileInfo;
})();

exports.FileInfo = FileInfo;

function _header(fileInfo) {
  //keyEncryptionRounds written ans UInt64LE
  var transformRoundsBuf = new _buffer.Buffer(8);
  transformRoundsBuf.writeUInt32LE(fileInfo.transformRounds, 0);
  transformRoundsBuf.writeUInt32LE(0, 4);

  var compressionBuf = new _buffer.Buffer(4);
  compressionBuf.writeUInt32LE(fileInfo.compression);

  return _buffer.Buffer.concat([_KdbxFile.FILE_SIGNATURE_1, _KdbxFile.FILE_SIGNATURE_2, _KdbxFile.FILE_VERSION, _headerField(_KdbxFile.HEADER_FIELD_ID.CipherID, new _buffer.Buffer(fileInfo.cipher, 'base64')), _headerField(_KdbxFile.HEADER_FIELD_ID.CompressionFlags, compressionBuf), _headerField(_KdbxFile.HEADER_FIELD_ID.MasterSeed, fileInfo.masterSeed), _headerField(_KdbxFile.HEADER_FIELD_ID.TransformSeed, fileInfo.transformSeed), _headerField(_KdbxFile.HEADER_FIELD_ID.TransformRounds, transformRoundsBuf), _headerField(_KdbxFile.HEADER_FIELD_ID.EncryptionIV, fileInfo.encryptionIV), _headerField(_KdbxFile.HEADER_FIELD_ID.ProtectedStreamKey, fileInfo.protectedStreamKey), _headerField(_KdbxFile.HEADER_FIELD_ID.StreamStartBytes, fileInfo.streamStartBytes), _headerField(_KdbxFile.HEADER_FIELD_ID.InnerRandomStreamID, SALSA_20), _headerField(_KdbxFile.HEADER_FIELD_ID.EndOfHeader, END)]);
}

function _headerField(id, data) {
  var headerFieldStart = new _buffer.Buffer(1 + 2);
  headerFieldStart.writeUInt8(id, 0);
  headerFieldStart.writeUInt16LE(data.length, 1);
  return _buffer.Buffer.concat([headerFieldStart, data]);
}

function toBuffer(_db, credentials) {
  return (_db._fileInfo ? _bluebird2['default'].resolve(_db) : defaultFileInfo().then(function (fileInfo) {
    _db._fileInfo = fileInfo;
    return _db;
  })).then(function (db) {
    if (credentials) db._key = new _keyComposite2['default'](credentials);

    if (!db._key) throw new Error('Missing db credentials');
    return db;
  }).then(function (db) {
    var header = _header(db._fileInfo);
    var headerHash = _crypto2['default'].createHash('sha256').update(header).digest('base64');
    return [db, header, headerHash];
  }).then(function (_ref4) {
    var _ref42 = _slicedToArray(_ref4, 3);

    var db = _ref42[0];
    var header = _ref42[1];
    var headerHash = _ref42[2];

    var xmlJson = db.toXml();
    xmlJson.KeePassFile.Meta.HeaderHash = headerHash;
    return [db, header, xmlJson];
  }).then(function (_ref5) {
    var _ref52 = _slicedToArray(_ref5, 3);

    var db = _ref52[0];
    var header = _ref52[1];
    var xmlJson = _ref52[2];

    return [db, header, new _xml2js2['default'].Builder().buildObject(xmlJson)];
  }).then(function (_ref6) {
    var _ref62 = _slicedToArray(_ref6, 3);

    var db = _ref62[0];
    var header = _ref62[1];
    var xml = _ref62[2];

    //console.log(xml);
    return new _bluebird2['default'](function (resolve, reject) {
      _zlib2['default'].gzip(xml, function (err, compressedXml) {
        if (err) return reject(err);
        return resolve([db, header, compressedXml]);
      });
    });
  }).then(function (_ref7) {
    var _ref72 = _slicedToArray(_ref7, 3);

    var db = _ref72[0];
    var header = _ref72[1];
    var buf = _ref72[2];

    // Split database into HBIO blocks and concat it with StreamStartbytes
    buf = _buffer.Buffer.concat([db._fileInfo.streamStartBytes, _utilityHashedBlockIO2['default'].encrypt(buf)]);

    var masterKey = db._key.generateKey(db._fileInfo.masterSeed, db._fileInfo.transformSeed, db._fileInfo.transformRounds);

    return _buffer.Buffer.concat([header, _cryptoCipher.Cipher.ALL[db._fileInfo.cipher].encrypt(buf, masterKey, db._fileInfo.encryptionIV)]);
  });
}

function fromBuffer(buffer, credentials) {
  var r = new _utilityBufferReader2['default'](buffer);

  var sig1 = r.nextBuffer(_KdbxFile.FILE_SIGNATURE_1.length);
  if (!sig1.equals(_KdbxFile.FILE_SIGNATURE_1)) return _bluebird2['default'].reject(new Error('Not a KeePass 2 database'));

  var sig2 = r.nextBuffer(_KdbxFile.FILE_SIGNATURE_2.length);
  if (!sig2.equals(_KdbxFile.FILE_SIGNATURE_2)) return _bluebird2['default'].reject(new Error('Not a KeePass 2 database'));

  var version = r.nextBuffer(_KdbxFile.FILE_VERSION.length);
  if (version[0] !== _KdbxFile.FILE_VERSION[0] && version[1] !== _KdbxFile.FILE_VERSION[1]) return _bluebird2['default'].reject(new Error('Version not supported'));

  return new _bluebird2['default'](function (resolve, reject) {

    var fileInfo = {};

    var endOfHeader = false;
    while (!endOfHeader) {
      var fieldId = r.nextUInt8();
      if (fieldId < 0 || fieldId >= _KdbxFile.HEADER_FIELD_ID.length) return reject(new Error('Unknow field id ' + fieldId));

      var fieldLength = r.nextUInt16LE();
      var data = r.nextBuffer(fieldLength);

      switch (fieldId) {
        case _KdbxFile.HEADER_FIELD_ID.EndOfHeader:
          endOfHeader = true;
          break;

        case _KdbxFile.HEADER_FIELD_ID.CipherID:
          var cipher = data.toString('base64');
          if (!_cryptoCipher.Cipher.ALL[cipher]) return reject(new Error('Not supported cipher'));
          fileInfo.cipher = cipher;

          break;

        case _KdbxFile.HEADER_FIELD_ID.CompressionFlags:
          var id = data.readUInt32LE(0);
          if (id >= COMPRESSION.length) return reject(new Error('Unknow compression algorithm'));

          fileInfo.compression = id;
          break;

        case _KdbxFile.HEADER_FIELD_ID.MasterSeed:
          if (data.length != 32) return reject(new Error('MasterSeed field must have length 32 bytes'));
          fileInfo.masterSeed = data;

          break;

        case _KdbxFile.HEADER_FIELD_ID.TransformSeed:
          if (data.length != 32) return reject(new Error('TransformSeed field must have length 32 bytes'));
          fileInfo.transformSeed = data;

          break;

        case _KdbxFile.HEADER_FIELD_ID.TransformRounds:
          fileInfo.transformRounds = data.readUInt32LE(0);
          if (data.readUInt32LE(4) !== 0) return reject(new Error('Implementation does not support so many encryption rounds'));

          break;

        case _KdbxFile.HEADER_FIELD_ID.EncryptionIV:
          if (data.length != 16) return reject(new Error('EncryptionIV field must have length 16 bytes'));
          fileInfo.encryptionIV = data;

          break;

        case _KdbxFile.HEADER_FIELD_ID.ProtectedStreamKey:
          if (data.length != 32) return reject(new Error('ProtectedStreamKey field must have length 32 bytes'));
          fileInfo.protectedStreamKey = data;

          break;

        case _KdbxFile.HEADER_FIELD_ID.StreamStartBytes:
          if (data.length != STREAM_START_BYTES_LENGTH) return reject(new Error('StreamStartBytes field must have length 32 bytes'));
          fileInfo.streamStartBytes = data;

          break;
        case _KdbxFile.HEADER_FIELD_ID.InnerRandomStreamID:
          if (!data.equals(SALSA_20)) {
            return reject(new Error('Only salsa20 supported'));
          }
      }
    }

    resolve(new FileInfo(fileInfo));
  }).then(function (fileInfo) {

    var compositeKey = new _keyComposite2['default'](credentials);

    var masterKey = compositeKey.generateKey(fileInfo.masterSeed, fileInfo.transformSeed, fileInfo.transformRounds);

    var payload = r.nextBuffer();

    payload = _cryptoCipher.Cipher.ALL[fileInfo.cipher].decrypt(payload, masterKey, fileInfo.encryptionIV);

    // Check database consistency with HBIO
    var streamStartBytes = payload.slice(0, STREAM_START_BYTES_LENGTH);
    if (!streamStartBytes.equals(fileInfo.streamStartBytes)) {
      throw new Error('Steam start bytes does not match');
    }

    return [compositeKey, fileInfo, _utilityHashedBlockIO2['default'].decrypt(payload.slice(STREAM_START_BYTES_LENGTH))];
  }).then(function (_ref8) {
    var _ref82 = _slicedToArray(_ref8, 3);

    var key = _ref82[0];
    var fileInfo = _ref82[1];
    var payload = _ref82[2];

    return fileInfo.compression === COMPRESSION.GZIP ? new _bluebird2['default'](function (resolve, reject) {
      _zlib2['default'].gunzip(payload, function (err, buf) {
        if (err) return reject(err);
        return resolve([key, fileInfo, buf]);
      });
    }) : _bluebird2['default'].resolve([key, fileInfo, payload]);
  }).then(function (_ref9) {
    var _ref92 = _slicedToArray(_ref9, 3);

    var key = _ref92[0];
    var fileInfo = _ref92[1];
    var buf = _ref92[2];
    return [key, fileInfo, buf.toString('utf8')];
  }).then(function (_ref10) {
    var _ref102 = _slicedToArray(_ref10, 3);

    var key = _ref102[0];
    var fileInfo = _ref102[1];
    var xml = _ref102[2];

    return new _bluebird2['default'](function (resolve, reject) {
      _xml2js2['default'].parseString(xml, { explicitArray: false }, function (err, database) {
        if (err) return reject(err);
        return resolve([key, fileInfo, database]);
      });
    });
  }).then(function (_ref11) {
    var _ref112 = _slicedToArray(_ref11, 3);

    var key = _ref112[0];
    var fileInfo = _ref112[1];
    var db = _ref112[2];
    return [key, _Database2['default'].fromXml(db, fileInfo)];
  }).then(function (_ref12) {
    var _ref122 = _slicedToArray(_ref12, 2);

    var key = _ref122[0];
    var db = _ref122[1];

    db._key = key;
    return db;
  });
}

function generateKey() {
  return randomBytes(32).then(function (bytes) {
    return {
      KeyFile: {
        Meta: {
          Version: '1.00'
        },
        Key: {
          Data: bytes.toString('base64')
        }
      }
    };
  }).then(function (xmlJson) {
    return new _xml2js2['default'].Builder().buildObject(xmlJson);
  });
}