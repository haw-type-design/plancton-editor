'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _UUID = require('./UUID');

var _UUID2 = _interopRequireDefault(_UUID);

var _util = require('./util');

var _Attribute = require('./Attribute');

var _Attribute2 = _interopRequireDefault(_Attribute);

var _utilityErrors = require('../utility/errors');

var _utilityErrors2 = _interopRequireDefault(_utilityErrors);

var _Icon = require('./Icon');

var _Icon2 = _interopRequireDefault(_Icon);

var DEFAULT_ATTRIBUTES = ['Notes', 'Password', 'Title', 'UserName', 'URL'];

var Entry = (function () {
  function Entry(db) {
    var _this = this;

    _classCallCheck(this, Entry);

    this._db = db;
    this._uuid = new _UUID2['default']();

    var now = new Date();

    this._creationTime = now;
    this._lastModificationTime = now;
    this._lastAccessTime = now;
    this._expiryTime = now;
    this._expires = false;
    this._locationChanged = now;

    this._usageCount = 0;

    this._strings = DEFAULT_ATTRIBUTES.map(function (name) {
      return new _Attribute2['default'](db, name, name === 'UserName' ? _this._db.defaultUserName : '', _this._db.memoryProtection(name));
    });

    //TODO binaries
    //TODO history
    //TODO autotype
  }

  _createClass(Entry, [{
    key: 'add',
    value: function add(attr) {
      _utilityErrors2['default'].instanceOf(attr, _Attribute2['default'], 'attr');
      var same = this._strings.filter(function (s) {
        return s.key === attr.key;
      })[0];
      if (same) {} else {
        this._strings.push(attr);
      }
    }
  }, {
    key: 'touch',
    value: function touch() {
      this._lastAccessTime = new Date();
    }
  }, {
    key: 'use',
    value: function use() {
      this._usageCount += 1;
    }
  }, {
    key: 'toXml',
    value: function toXml() {
      return {
        UUID: this._uuid.toXml(),

        IconID: _Icon2['default'].Key,

        ForegroundColor: '',
        BackgroundColor: '',
        OverrideURL: '',
        Tags: '',

        Times: {
          LastModificationTime: this._lastModificationTime.toISOString(),
          CreationTime: this._creationTime.toISOString(),
          LastAccessTime: this._lastAccessTime.toISOString(),
          Expires: (0, _util.boolXml)(this._expires),
          ExpiryTime: this._expiryTime.toISOString(),
          UsageCount: this._usageCount,
          LocationChanged: this._locationChanged.toISOString()
        },
        String: this._strings.map(function (str) {
          return str.toXml();
        }),
        AutoType: {
          Enabled: (0, _util.boolXml)(true),
          DataTransferObfuscation: 0,
          DefaultSequence: ''
        }
      };
    }
  }]);

  return Entry;
})();

Entry.fromXml = function (xmlJson, db) {
  var e = new Entry(db);

  e._uuid = _UUID2['default'].fromXml(xmlJson.UUID);

  e._creationTime = new Date(xmlJson.Times.CreationTime);
  e._lastModificationTime = new Date(xmlJson.Times.LastModificationTime);
  e._lastAccessTime = new Date(xmlJson.Times.LastAccessTime);
  e._expiryTime = new Date(xmlJson.Times.ExpiryTime);
  e._expires = (0, _util.boolXml)(xmlJson.Times.Expires);
  e._locationChanged = new Date(xmlJson.Times.LocationChanged);

  e._usageCount = 1 * xmlJson.Times.UsageCount;

  e._strings = (0, _util.arrNode)(xmlJson.String).map(function (str) {
    return _Attribute2['default'].fromXml(str, db);
  });

  return e;
};

exports['default'] = Entry;
module.exports = exports['default'];