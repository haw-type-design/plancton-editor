'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _util = require('./util');

var _UUID = require('./UUID');

var _UUID2 = _interopRequireDefault(_UUID);

var _Group = require('./Group');

var _Group2 = _interopRequireDefault(_Group);

var _DeletedObject = require('./DeletedObject');

var _DeletedObject2 = _interopRequireDefault(_DeletedObject);

var Database = (function () {
  function Database(fileInfo) {
    _classCallCheck(this, Database);

    var now = new Date();

    this._fileInfo = fileInfo;

    this._databaseName = '';
    this._databaseNameChanged = now;

    this._databaseDescription = '';
    this._databaseDescriptionChanged = now;

    this._defaultUserName = '';
    this._defaultUserNameChanged = now;

    //not really used
    this._maintenanceHistoryDays = 365;

    //used not by all clients, e.g. KeePass uses, but KeePassX don't
    this._color = '';

    //TODO low priority
    this._masterKeyChanged = now;

    this._recycleBinEnabled = true;
    this._recycleBinUUID = _UUID2['default'].ZERO;
    this._recycleBinChanged = now;

    this._entryTemplatesGroup = _UUID2['default'].ZERO;
    this._entryTemplatesGroupChanged = now;

    this._memoryProtection = {
      Title: false,
      UserName: false,
      Password: true,
      URL: false,
      Notes: false
    };

    this._historyMaxItems = 10;
    this._historyMaxSize = 6291456;

    this._binaries = null;
    this._customData = null;

    this._root = new _Group2['default'](this, 'Root');

    this._deletedObjects = [];
  }

  _createClass(Database, [{
    key: 'memoryProtection',
    value: function memoryProtection(name) {
      return !!this._memoryProtection[name];
    }
  }, {
    key: 'touchMasterKey',
    value: function touchMasterKey() {
      this._masterKeyChanged = new Date();
    }
  }, {
    key: 'unpack',
    value: function unpack(value) {
      return this._fileInfo.unpack(value);
    }
  }, {
    key: 'pack',
    value: function pack(value) {
      return this._fileInfo.pack(value);
    }
  }, {
    key: 'toXml',
    value: function toXml() {
      return {
        KeePassFile: {
          Meta: {
            Generator: 'keepass.js',
            HeaderHash: '',

            DatabaseName: this._databaseName,
            DatabaseNameChanged: this._databaseNameChanged.toISOString(),

            DatabaseDescription: this._databaseDescription,
            DatabaseDescriptionChanged: this._databaseDescriptionChanged.toISOString(),

            DefaultUserName: this._defaultUserName,
            DefaultUserNameChanged: this._defaultUserNameChanged.toISOString(),

            MaintenanceHistoryDays: this._maintenanceHistoryDays,

            Color: this._color,

            MasterKeyChanged: this._masterKeyChanged.toISOString(),
            MasterKeyChangeRec: -1,
            MasterKeyChangeForce: -1,

            MemoryProtection: {
              ProtectTitle: (0, _util.boolXml)(this._memoryProtection.Title),
              ProtectUserName: (0, _util.boolXml)(this._memoryProtection.UserName),
              ProtectPassword: (0, _util.boolXml)(this._memoryProtection.Password),
              ProtectURL: (0, _util.boolXml)(this._memoryProtection.URL),
              ProtectNotes: (0, _util.boolXml)(this._memoryProtection.Notes)
            },

            CustomIcons: '',

            RecycleBinEnabled: (0, _util.boolXml)(this._recycleBinEnabled),
            RecycleBinUUID: this._recycleBinUUID.toXml(),
            RecycleBinChanged: this._recycleBinChanged.toISOString(),

            EntryTemplatesGroup: this._entryTemplatesGroup.toXml(),
            EntryTemplatesGroupChanged: this._entryTemplatesGroupChanged.toISOString(),

            LastSelectedGroup: _UUID2['default'].ZERO.toXml(),
            LastTopVisibleGroup: _UUID2['default'].ZERO.toXml(),

            HistoryMaxItems: this._historyMaxItems,
            HistoryMaxSize: this._historyMaxSize,

            Binaries: this._binaries, //TODO
            CustomData: this._customData
          },
          Root: {
            Group: this._root.toXml(),
            DeletedObjects: {
              DeletedObject: this._deletedObjects.map(function (d) {
                return d.toXml();
              })
            }
          }
        }
      };
    }
  }, {
    key: 'root',
    get: function get() {
      return this._root;
    }
  }, {
    key: 'name',
    get: function get() {
      return this._databaseName;
    },
    set: function set(value) {
      this._databaseName = value;
      this._databaseNameChanged = new Date();
    }
  }, {
    key: 'description',
    get: function get() {
      return this._databaseDescription;
    },
    set: function set(value) {
      this._databaseDescription = value;
      this._databaseDescriptionChanged = new Date();
    }
  }, {
    key: 'defaultUserName',
    get: function get() {
      return this._defaultUserName;
    },
    set: function set(value) {
      this._defaultUserName = value;
      this._defaultUserNameChanged = new Date();
    }
  }]);

  return Database;
})();

Database.fromXml = function (xmlJson, fileInfo) {
  var db = new Database(fileInfo);

  var meta = xmlJson.KeePassFile.Meta;

  db._databaseName = meta.DatabaseName;
  db._databaseNameChanged = new Date(meta.DatabaseNameChanged);

  db._description = meta.DatabaseDescription;
  db._databaseDescriptionChanged = new Date(meta.DatabaseDescriptionChanged);

  db._defaultUserName = meta.DefaultUserName;
  db._defaultUserNameChanged = new Date(meta.DefaultUserNameChanged);

  db._maintenanceHistoryDays = 1 * meta.MaintenanceHistoryDays;

  db._color = meta.Color;
  db._masterKeyChanged = new Date(meta.MasterKeyChanged);

  db._memoryProtection = {
    Title: (0, _util.boolXml)(meta.MemoryProtection.ProtectTitle),
    UserName: (0, _util.boolXml)(meta.MemoryProtection.ProtectUserName),
    Password: (0, _util.boolXml)(meta.MemoryProtection.ProtectPassword),
    URL: (0, _util.boolXml)(meta.MemoryProtection.ProtectURL),
    Notes: (0, _util.boolXml)(meta.MemoryProtection.ProtectNotes)
  };

  db._recycleBinEnabled = (0, _util.boolXml)(meta.RecycleBinEnabled);
  db._recycleBinUUID = _UUID2['default'].fromXml(meta.RecycleBinUUID);
  db._recycleBinChanged = new Date(meta.RecycleBinChanged);

  db._entryTemplatesGroup = _UUID2['default'].fromXml(meta.EntryTemplatesGroup);
  db._entryTemplatesGroupChanged = new Date(meta.EntryTemplatesGroupChanged);

  db._historyMaxItems = 1 * meta.HistoryMaxItems;
  db._historyMaxSize = 1 * meta.HistoryMaxSize;

  db._binaries = meta.Binaries;
  db._customData = meta.CustomData;

  db._root = _Group2['default'].fromXml(xmlJson.KeePassFile.Root.Group, db);
  db._deletedObjects = (0, _util.arrNode)(xmlJson.KeePassFile.Root.DeletedObjects.DeletedObject).map(function (xmlJson) {
    return _DeletedObject2['default'].fromXml(xmlJson);
  });

  return db;
};

exports['default'] = Database;
module.exports = exports['default'];