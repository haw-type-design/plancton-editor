'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _UUID = require('./UUID');

var _UUID2 = _interopRequireDefault(_UUID);

var _util = require('./util');

var _Icon = require('./Icon');

var _Icon2 = _interopRequireDefault(_Icon);

var _Entry = require('./Entry');

var _Entry2 = _interopRequireDefault(_Entry);

var Group = (function () {
  function Group(db) {
    var name = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];

    _classCallCheck(this, Group);

    this._uuid = new _UUID2['default']();

    var now = new Date();

    this._creationTime = now;
    this._lastModificationTime = now;
    this._lastAccessTime = now;
    this._locationChanged = now;
    this._expiryTime = now;
    this._expires = false;

    this._usageCount = 0;

    this._notes = '';
    this._name = name;

    this._expanded = true;

    this._entries = [];
    this._groups = [];
  }

  _createClass(Group, [{
    key: 'addEntry',
    value: function addEntry(entry) {
      this._entries.push(entry);
    }
  }, {
    key: 'toXml',
    value: function toXml() {
      return {
        UUID: this._uuid.toXml(),
        Name: this._name,
        Notes: this._notes,

        IconID: _Icon2['default'].Folder,

        Times: {
          LastModificationTime: this._lastModificationTime.toISOString(),
          CreationTime: this._creationTime.toISOString(),
          LastAccessTime: this._lastAccessTime.toISOString(),
          ExpiryTime: this._expiryTime.toISOString(),
          Expires: (0, _util.boolXml)(this._expires),
          UsageCount: this._usageCount,
          LocationChanged: this._locationChanged.toISOString()
        },

        IsExpanded: (0, _util.boolXml)(this._expanded),

        DefaultAutoTypeSequence: '',
        EnableAutoType: 'null',
        EnableSearching: 'null',

        LastTopVisibleEntry: _UUID2['default'].ZERO.toXml(),

        Entry: this._entries.map(function (entry) {
          return entry.toXml();
        }),
        Group: this._groups.map(function (group) {
          return group.toXml();
        })
      };
    }
  }]);

  return Group;
})();

Group.fromXml = function (xmlJson, db) {
  var g = new Group(db);

  g._uuid = _UUID2['default'].fromXml(xmlJson.UUID);

  g._creationTime = new Date(xmlJson.Times.CreationTime);
  g._lastModificationTime = new Date(xmlJson.Times.LastModificationTime);
  g._lastAccessTime = new Date(xmlJson.Times.LastAccessTime);
  g._locationChanged = new Date(xmlJson.Times.LocationChanged);
  g._expiryTime = new Date(xmlJson.Times.ExpiryTime);
  g._expires = (0, _util.boolXml)(xmlJson.Times.Expires);

  g._usageCount = 1 * xmlJson.Times.UsageCount;

  g._notes = xmlJson.Notes;
  g._name = xmlJson.Name;

  g._expanded = (0, _util.boolXml)(xmlJson.IsExpanded);

  g._entries = (0, _util.arrNode)(xmlJson.Entry).map(function (xmlJson) {
    return _Entry2['default'].fromXml(xmlJson, db);
  });

  g._groups = (0, _util.arrNode)(xmlJson.Group).map(function (xmlJson) {
    return Group.fromXml(xmlJson, db);
  });

  return g;
};

exports['default'] = Group;
module.exports = exports['default'];