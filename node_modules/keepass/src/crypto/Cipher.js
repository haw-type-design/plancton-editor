'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _crypto = require('crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _buffer = require('buffer');

var Cipher = (function () {
  function Cipher() {
    _classCallCheck(this, Cipher);
  }

  _createClass(Cipher, [{
    key: 'name',
    value: function name() {
      throw new Error('Not implemented');
    }
  }, {
    key: 'uuid',
    value: function uuid() {
      throw new Error('Not implemented');
    }
  }, {
    key: 'encrypt',
    value: function encrypt() /*buffer, key, iv*/{
      throw new Error('Not implemented');
    }
  }, {
    key: 'decrypt',
    value: function decrypt() /*buffer, key, iv*/{
      throw new Error('Not implemented');
    }
  }]);

  return Cipher;
})();

exports.Cipher = Cipher;

var AesDefaultCipher = (function (_Cipher) {
  _inherits(AesDefaultCipher, _Cipher);

  function AesDefaultCipher() {
    _classCallCheck(this, AesDefaultCipher);

    _get(Object.getPrototypeOf(AesDefaultCipher.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(AesDefaultCipher, [{
    key: 'name',
    value: function name() {
      return 'AES-256-CDC';
    }
  }, {
    key: 'uuid',
    value: function uuid() {
      return 'McHy5r9xQ1C+WAUhavxa/w==';
    }
  }, {
    key: 'encrypt',
    value: function encrypt(buffer, key, iv) {
      var cipher = _crypto2['default'].createCipheriv('aes-256-cbc', key, iv);
      return _buffer.Buffer.concat([cipher.update(buffer), cipher.final()]);
    }
  }, {
    key: 'decrypt',
    value: function decrypt(buffer, key, iv) {
      var cipher = _crypto2['default'].createDecipheriv('aes-256-cbc', key, iv);
      // Decrypt database with AES-256-CBC
      cipher.setAutoPadding(true);
      return _buffer.Buffer.concat([cipher.update(buffer), cipher.final()]);
    }
  }]);

  return AesDefaultCipher;
})(Cipher);

exports.AesDefaultCipher = AesDefaultCipher;

var aes = new AesDefaultCipher();

Cipher.ALL = _defineProperty({}, aes.uuid(), aes);

Cipher.DEFAULT = aes.uuid();