'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _errors = require('./errors');

var _errors2 = _interopRequireDefault(_errors);

var BufferReader = (function () {
  function BufferReader(buffer) {
    _classCallCheck(this, BufferReader);

    _errors2['default'].buffer(buffer, 'buffer');

    this._index = 0;
    this._buffer = buffer;
  }

  _createClass(BufferReader, [{
    key: 'hasNext',
    value: function hasNext() {
      return this._index < this._buffer.length;
    }
  }, {
    key: 'nextBuffer',
    value: function nextBuffer(length) {
      if (typeof length === 'undefined') length = this._buffer.length;
      var res = this._buffer.slice(this._index, this._index + length);
      this._index += length;
      return res;
    }
  }, {
    key: '_nextRead',
    value: function _nextRead(method, length) {
      var res = this._buffer[method](this._index);
      this._index += length;
      return res;
    }
  }, {
    key: 'nextUInt8',
    value: function nextUInt8() {
      return this._nextRead('readUInt8', 1);
    }
  }, {
    key: 'nextUInt16LE',
    value: function nextUInt16LE() {
      return this._nextRead('readUInt16LE', 2);
    }
  }, {
    key: 'nextUInt32LE',
    value: function nextUInt32LE() {
      return this._nextRead('readUInt32LE', 4);
    }
  }]);

  return BufferReader;
})();

exports['default'] = BufferReader;
module.exports = exports['default'];